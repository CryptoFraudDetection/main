---
jupyter: python3
---

```{python}
import pandas as pd
```

```{python}
df_run_v1 = pd.read_json("../reports/hyperparameter_search_gat.json")
df_run_v2 = pd.read_json("../reports/hyperparameter_search_gat_v2.json")
df_coins = pd.read_json("../data/raw/coins.json")
```

```{python}
display(df_run_v1.head())
display(df_run_v2.head())
```

```{python}
df_coins
```

```{python}
def get_rating_hparams(df, df_coins):
    """Get sorted dataframe with the best hyperparameters based on the number of correct predictions (>= 0.5) and mean accuracy"""
    # Split accuracies into separate columns
    df_accuracies = pd.DataFrame(df["accuracies"].to_list())
    df = pd.concat([df, df_accuracies], axis=1)

    # Calculate mean accuracy for each coin and overall
    df["correct"] = df["accuracies"].apply(lambda x: sum([1 for acc in x.values() if acc >= 0.5]))
    df["mean_acc_non_scam"] = df[
        [coin for coin in df_coins["name"][df_coins["fraud"] == 0] if coin in df.columns]
    ].mean(axis=1)
    df["mean_acc_scam"] = df[[coin for coin in df_coins["name"][df_coins["fraud"] == 1] if coin in df.columns]].mean(
        axis=1
    )
    df["macro_acc"] = (df["mean_acc_non_scam"] + df["mean_acc_scam"]) / 2

    # Calculate the mean coin prediction
    df["mean_predictions"] = df["accuracies"].apply(
        lambda x: {
            coin: acc if coin in df_coins[df_coins["fraud"] == 1]["name"].values else 1 - acc for coin, acc in x.items()
        }
    )

    # Rating penalizes models with low mean accuracy in either class, similar to F1 score
    df["rating"] = 2 * df["mean_acc_non_scam"] * df["mean_acc_scam"] / (df["mean_acc_non_scam"] + df["mean_acc_scam"])

    return df.sort_values(by=["correct", "rating"], ascending=False)
```

```{python}
get_rating_hparams(df_run_v1, df_coins).head()
```

```{python}
get_rating_hparams(df_run_v1, df_coins).mean_predictions[0]
```

```{python}
get_rating_hparams(df_run_v2, df_coins).head()
```

```{python}
get_rating_hparams(df_run_v2, df_coins).mean_predictions[0]
```

